| Архитектура / Паттерн                 | Применение в AAA                                | Плюсы                                                           | Минусы                                                                      |
| ------------------------------------- | ----------------------------------------------- | --------------------------------------------------------------- | --------------------------------------------------------------------------- |
| **Layered / Слоистая**                | UI, простые игровые системы                     | Чёткое разделение ответственности, легко тестировать            | Зависимости между слоями, сложно масштабировать крупные системы             |
| **Component Object Pattern (COP)**    | Unity/Unreal, гибкие объекты (NPC, игроки)      | Гибкость, динамическое добавление компонентов                   | Компоненты могут содержать логику → спагетти-код, трудно масштабировать     |
| **Entity-Component-System (ECS)**     | Массовые объекты, DOTS, частицы, NPC толпы      | Performance, batch updates, легко масштабировать                | Трудно писать уникальные OOP-объекты, сложнее отлаживать логические цепочки |
| **Event-driven / Observer**           | События, MessageBus, реакция на действия        | Декуплинг, легко добавлять реакции без изменения кода           | Поток событий сложно отслеживать, возможны баги с порядком обработки        |
| **Facade / DI**                       | Combat, AI, Animation, модульные системы        | Абстракция, тестируемость, легко менять реализации              | Сложнее новичку, требует дисциплины в проектировании                        |
| **State Machine / FSM**               | AI, боёвка, анимации                            | Контроль переходов состояний, предсказуемость                   | Много состояний → сложно поддерживать, неэффективно для массовых объектов   |
| **Data-driven / Scriptable Objects**  | Баланс, оружие, умения, настройки системы       | Легко менять данные без перекомпиляции, удобство для дизайнеров | Потенциальная деградация кода, нужно соблюдать контракт данных              |
| **Pipeline / Systems**                | Сетевые AAA, ECS, массовая обработка объектов   | Масштабируемость, предсказуемый порядок обработки               | Сложность проектирования, высокий порог входа                               |
| **Service-oriented / Microservice**   | Онлайн-сервисы, inventory, economy, matchmaking | Масштабируемость, декуплинг подсистем                           | Сложнее синхронизировать, нужен orchestration layer                         |
| **Blackboard / Shared Data**          | AI, Behavior Tree, GOAP                         | Централизованное хранение знаний, легко расширять поведение     | Потенциально «спагетти» данные, требует дисциплины                          |
| **Hybrid ECS + COP**                  | Боёвка, уникальные объекты + массовые расчёты   | Можно комбинировать гибкость COP и производительность ECS       | Сложность архитектуры и отладки                                             |
| **Command / Action Queue**            | Боёвка, Undo/Redo, сетевые игры                 | Полная история действий, легко сетево реплицировать             | Сложная реализация, требует очередей и управления событиями                 |
| **Dependency Injection (DI)**         | Любые системы, особенно крупные подсистемы      | Абстракция, тестируемость, легко заменять реализации            | Требует дисциплины, повышенная сложность начальной настройки                |
| **Observer / Event Bus**              | Системы UI, эффектов, боёвка                    | Декуплинг, гибкая подписка на события                           | Поток событий трудно отслеживать, возможны race conditions                  |
| **Reactive Programming (Rx / UniRx)** | UI, боёвка, сетевые состояния                   | Декларативная обработка данных, легко комбинировать события     | Overhead, может быть сложно для новичков, повышенная сложность отладки      |
| **Blackboard + Behavior Tree**        | AI NPC                                          | Структурированное поведение, легко расширять                    | Для больших деревьев может быть сложно визуально управлять                  |
| **State Machine + Events**            | Фазы атаки, анимации, эффекты                   | Контролируемые состояния, легко триггерить эффекты              | Состояний много → сложно поддерживать                                       |
| **Factory / Prototype**               | Создание объектов (NPC, оружие, эффекты)        | Централизованное создание, легко тестировать                    | Много фабрик → сложнее поддерживать                                         |
| **Singleton / Manager**               | Глобальные сервисы (GameManager, AudioManager)  | Лёгкий доступ, простая реализация                               | Антипаттерн для масштабирования, сложность тестирования                     |
| **Observer + Pipeline**               | Сетевые и локальные события                     | Масштабируемость, легко расширять                               | Сложно отлаживать поток данных                                              |
